/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.001;
//to change units
vertices
(
    (0 0 0)//V0
    (5 0 0)//V1
    (5 5 0)//V2
    (0 5 0)
    (0 0 5)
    (5 0 5)
    (5 5 5)
    (0 5 5)	
 
);

//to connect the vertices
blocks
(
    hex (0 1 2 3 4 5 6 7) (20 20 20) simpleGrading (1 1 1)
//use a cube to connect all vertices - hex (0 1 2 3 4 5 6 7)
//how many cubes in each direction or how to divide each dimension
// - (20 20 20), so each mesh here will be 5/20 = 0.25 units in size
//grading can be used it you want to use a more refined mesh in any 
//particular direction

);

edges
(
//each vertex is by default connected by straight line
);

boundary
(//each face has to be given a boundary type - 
//wall, patch, symmetry, cyclic, inlet, outlet
    Inlet
    {
        type patch;//lets everything through
        faces
        (
            (0 4 7 3)
          
        );
    }
    Outlet
    {
        type patch;
        faces
        (
            (1 5 6 2)
        );
    }
    frontback
    {
        type wall;
        faces
        (//you can combine multiple faces for the same type of boundary condition
            (0 1 5 4)
            (3 2 6 7)
        );
    }
    top
    {
        type            cyclic;
        neighbourPatch  bottom;//for cyclic patch, you need to define who
				//is the neighbour
        faces           ((4 5 6 7));
    }
    bottom
    {
        type            cyclic;
        neighbourPatch  top;
        faces           ((0 1 2 3));
    }
    
);

mergePatchPairs
(
//in case you want to do 2D
);

// ************************************************************************* //
